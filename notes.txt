
**Cosine similarity notes

--magnitude
||A|| = sqrt(SIGMA count1^2)
||B|| = sqrt(SIGMA count2^2)

--count1
count1 = number of times a word appears in file1
count2 = number of times a word appears in file2

EX:
file1 contains [a,b,c,c,c,d]
file2 contains [a,b,b,b,c,d,d]

WORD      count1       count2         count1^2           count2^2
a           1             1               1                   1  
b           1             3               1                   9  
c           3             1               9                   1  
d           1             2               1                   4 





** Levenshtein distance notes
Levenshtein Score = number of operations to change one string to another

Calculate the similarity score: (1-(LevenshteinScore/MaxLength))*100

I'm going to do a char by char comparing each word to a word in the adjacent file

        ""  m   o   n   k
    ""  0   1   2   3   4
    d   1   1   2   3   4
    u   2   2   2   3   4
    n   3   3   3   2   3
    k   4   4   4   3   2 <-- Levenshtein Score
      
scratch that ^^ I'm just gonna do word by word

        ""  i   am  a   text
    ""  0   1   2   3   4
    i   1   0   1   2   3
    am  2   1   0   1   2
    a   3   2   1   0   1
    file4   3   2   1   1         
    









** Jaccard Index notes

Union = Present in either set, combined, without repetition
Intersection = Present in both sets

Similarity Score = (Intersection of two sets)/(Union of two sets)









